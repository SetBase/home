---
import type { ItemGrid as Props } from '~/types';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon, href, callToAction, mobileText, classes: itemClasses = {} }) => {
        const Wrapper = href ? 'a' : 'div'; // Conditionally render <a> or <div>
        return (
          <Wrapper
            {...(href ? { href } : {})}
            class={twMerge(
              'flex flex-row max-w-md group intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade',
              panelClass,
              itemClasses?.panel
            )}
          >
            <div class="flex justify-center">
              {(icon || defaultIcon) && (
                <Icon
                  name={icon || defaultIcon}
                  class={twMerge(
                    'w-7 h-7 mr-2 rtl:mr-0 rtl:ml-2 text-primary transition-transform duration-200',
                    href && 'group-hover:scale-110 group-hover:text-green-300', // Apply hover effects only if href exists
                    defaultIconClass,
                    itemClasses?.icon
                  )}
                />
              )}
            </div>
            <div class="mt-0.5">
              {title && (
                <h3
                  class={twMerge(
                    'text-xl font-bold transition-colors duration-200',
                    href && 'group-hover:text-secondary', // Apply hover effects only if href exists
                    titleClass,
                    itemClasses?.title
                  )}
                >
                  {title}
                </h3>
              )}
              {description && (
                <p
                  class={twMerge(
                    `${title ? 'mt-3' : ''} text-muted transition-opacity duration-200`,
                    href && 'group-hover:opacity-80', // Apply hover effects only if href exists
                    descriptionClass,
                    itemClasses?.description
                  )}
                  set:html={description}
                />
              )}
              {/* Add mobile-specific text */}
              {mobileText && (
                <Icon
                  name="tabler:arrow-right"
                  class="w-5 h-5 mt-2 sm:hidden text-primary"
                />
              )}
              {callToAction && (
                <div class={twMerge(`${title || description ? 'mt-3' : ''}`, actionClass, itemClasses?.actionClass)}>
                  <Button variant="link" {...callToAction} />
                </div>
              )}
            </div>
          </Wrapper>
        );
      })}
    </div>
  )
}

